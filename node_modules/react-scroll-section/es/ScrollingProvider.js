var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _class, _temp2;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React from 'react';
import debounce from 'debounce';
import PropTypes from 'prop-types';
import { Provider } from './scrollContext';

var ScrollingProvider = (_temp2 = _class = function (_React$Component) {
  _inherits(ScrollingProvider, _React$Component);

  function ScrollingProvider() {
    var _temp, _this, _ret;

    _classCallCheck(this, ScrollingProvider);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
      selected: ''
    }, _this.refList = {}, _this.handleScroll = function () {
      var selected = Object.entries(_this.refList).reduce(function (acc, _ref) {
        var key = _ref[0],
            value = _ref[1];

        var _value$current$getBou = value.current.getBoundingClientRect(),
            top = _value$current$getBou.top;

        var differenceFromTop = Math.abs(top);

        return differenceFromTop < acc.differenceFromTop ? {
          differenceFromTop: differenceFromTop,
          key: key
        } : acc;
      }, {
        differenceFromTop: 9999,
        key: ''
      });

      _this.setState({ selected: selected.key });
    }, _this.debounceScroll = debounce(_this.handleScroll, _this.props.debounceDelay || 50), _this.registerRef = function (id) {
      var _extends2;

      var newRef = React.createRef();
      _this.refList = _extends({}, _this.refList, (_extends2 = {}, _extends2[id] = newRef, _extends2));
      return newRef;
    }, _this.scrollTo = function (section) {
      var behavior = _this.props.scrollBehavior;

      var sectionRef = _this.refList[section];
      if (!sectionRef) return console.warn('Section ID not recognized!');

      var top = sectionRef.current.offsetTop;

      _this.setState({ selected: section }, function () {
        return window.scrollTo({
          top: top,
          behavior: behavior
        });
      });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  ScrollingProvider.prototype.componentDidMount = function componentDidMount() {
    document.addEventListener('scroll', this.debounceScroll, true);
    this.handleScroll();
  };

  ScrollingProvider.prototype.componentWillUnmount = function componentWillUnmount() {
    document.removeEventListener('scroll', this.debounceScroll, true);
  };

  // eslint-disable-next-line


  ScrollingProvider.prototype.render = function render() {
    var selected = this.state.selected;
    var children = this.props.children;


    var value = {
      registerRef: this.registerRef,
      scrollTo: this.scrollTo,
      refList: this.refList,
      selected: selected
    };
    return React.createElement(
      Provider,
      { value: value },
      children
    );
  };

  return ScrollingProvider;
}(React.Component), _class.defaultProps = {
  debounceDelay: 50,
  scrollBehavior: 'smooth',
  children: null
}, _temp2);
export { ScrollingProvider as default };
ScrollingProvider.propTypes = process.env.NODE_ENV !== "production" ? {
  /** ms. to wait until the calculation of the current section */
  debounceDelay: PropTypes.number,
  /** scrolling style */
  scrollBehavior: PropTypes.oneOf(['auto', 'smooth']),
  /** React component */
  children: PropTypes.node
} : {};