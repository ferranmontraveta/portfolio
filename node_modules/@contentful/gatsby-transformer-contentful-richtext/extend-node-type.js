"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

const _require = require(`@contentful/rich-text-html-renderer`),
      documentToHtmlString = _require.documentToHtmlString;

const _require2 = require(`@contentful/rich-text-plain-text-renderer`),
      documentToPlainTextString = _require2.documentToPlainTextString;

const _require3 = require(`gatsby/graphql`),
      GraphQLString = _require3.GraphQLString,
      GraphQLInt = _require3.GraphQLInt;

const words = require('lodash.words');

let pathPrefixCacheStr = ``;

const htmlCacheKey = node => `transformer-contentful-rich-text-html-${node.internal.contentDigest}-${pathPrefixCacheStr}`;

const ttrCacheKey = node => `transformer-contentful-rich-text-ttr-${node.internal.contentDigest}-${pathPrefixCacheStr}`;

module.exports = ({
  type,
  cache,
  pathPrefix
}, pluginOptions) => {
  if (type.name !== `ContentfulRichText`) {
    return {};
  }

  pathPrefixCacheStr = pathPrefix || ``;

  function cacheWrap(_x, _x2) {
    return _cacheWrap.apply(this, arguments);
  }

  function _cacheWrap() {
    _cacheWrap = (0, _asyncToGenerator2.default)(function* (key, fn) {
      let cached = yield cache.get(key);

      if (!cached) {
        let toCache = yield fn();
        cache.set(toCache);
        return toCache;
      }

      return cached;
    });
    return _cacheWrap.apply(this, arguments);
  }

  let renderOptions = pluginOptions.renderOptions;
  renderOptions = renderOptions || {};
  return new Promise(resolve => {
    return resolve({
      html: {
        type: GraphQLString,
        resolve: richTextNode => cacheWrap(htmlCacheKey(richTextNode), () => documentToHtmlString(JSON.parse(richTextNode.internal.content), renderOptions))
      },
      timeToRead: {
        type: GraphQLInt,
        resolve: richTextNode => cacheWrap(ttrCacheKey(richTextNode), () => {
          let plainString = documentToPlainTextString(JSON.parse(richTextNode.internal.content));
          let wordsCount = words(plainString).length;
          let avgWPM = 200;
          return Math.floor(wordsCount / avgWPM) || 1;
        })
      }
    });
  });
};